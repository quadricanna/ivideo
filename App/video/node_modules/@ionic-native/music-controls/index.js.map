{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../src/@ionic-native/plugins/music-controls/index.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;AAAA,OAAO,EAAE,UAAU,EAAE,MAAM,eAAe,CAAC;AAC3C,OAAO,EAAE,OAAO,EAAE,iBAAiB,EAAE,MAAM,EAAE,MAAM,oBAAoB,CAAC;AACxE,OAAO,EAAE,UAAU,EAAE,MAAM,iBAAiB,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAyJV,iCAAiB;;;;IAClD;;;;OAIG;;;;;;IAEH,8BAAM;;;;;cAAC,OAA6B;QAClC,MAAM,CAAC;KACR;IAED;;;OAGG;;;;;IAEH,+BAAO;;;;;QACL,MAAM,CAAC;KACR;IAED;;;OAGG;;;;;IAIH,iCAAS;;;;;QACP,MAAM,CAAC;KACR;IAED;;OAEG;;;;IAEH,8BAAM;;;mBAAW;IAEjB;;;OAGG;;;;;IAEH,uCAAe;;;;cAAC,SAAkB,KAAU;IAE5C;;;OAGG;;;;;IAIH,qCAAa;;;;cAAC,IAA6C,KAAU;IAErE;;;OAGG;;;;;IAEH,yCAAiB;;;;cAAC,WAAoB,KAAU;;gBA3DjD,UAAU;;;QAOR,OAAO,EAAE;;;;+CAGT;;QAMA,OAAO,EAAE;;;;gDAGT;;QAMA,OAAO,CAAC;YACP,UAAU,EAAE,IAAI;SACjB,CAAC;;;wCACW,UAAU;kDAEtB;;QAKA,OAAO,CAAC,EAAE,IAAI,EAAE,IAAI,EAAE,CAAC;;;;+CACP;;QAMhB,OAAO,EAAE;;;;wDACkC;;QAM3C,OAAO,CAAC;YACP,SAAS,EAAE,CAAC,KAAK,CAAC;SACnB,CAAC;;;;sDACmE;;QAMpE,OAAO,EAAE;;;;0DACsC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IA1DrC,aAAa;QARzB,MAAM,CAAC;YACN,UAAU,EAAE,eAAe;YAC3B,MAAM,EAAE,+BAA+B;YACvC,SAAS,EAAE,eAAe;YAC1B,IAAI,EAAE,4DAA4D;YAClE,SAAS,EAAE,CAAC,SAAS,EAAE,KAAK,EAAE,SAAS,CAAC;SACzC,CAAC;OAEW,aAAa,EA2DzB;wBAtND;EA2JmC,iBAAiB;SAAvC,aAAa","sourcesContent":["import { Injectable } from '@angular/core';\nimport { Cordova, IonicNativePlugin, Plugin } from '@ionic-native/core';\nimport { Observable } from 'rxjs/Observable';\n\nexport interface MusicControlsOptions {\n  track?: string;\n  artist?: string;\n  cover?: string;\n  isPlaying?: boolean;\n  dismissable?: boolean;\n  hasPrev?: boolean;\n  hasNext?: boolean;\n  hasSkipForward?: boolean;\n  hasSkipBackward?: boolean;\n  skipForwardInterval?: number;\n  skipBackwardInterval?: number;\n  hasScrubbing?: boolean;\n  hasClose?: boolean;\n  album?: string;\n  duration?: number;\n  elapsed?: number;\n  ticker?: string;\n  playIcon?: string;\n  pauseIcon?: string;\n  prevIcon?: string;\n  nextIcon?: string;\n  closeIcon?: string;\n  notificationIcon?: string;\n}\n\n/**\n * @name Music Controls\n * @description\n * Music controls for Cordova applications.\n * Display a 'media' notification with play/pause, previous, next buttons, allowing the user to control the play.\n * Handle also headset event (plug, unplug, headset button).\n *\n * @usage\n * ```typescript\n * import { MusicControls } from '@ionic-native/music-controls';\n *\n * constructor(private musicControls: MusicControls) { }\n *\n * ...\n *\n * this.musicControls.create({\n *   track       : 'Time is Running Out',        // optional, default : ''\n *   artist      : 'Muse',                       // optional, default : ''\n *   cover       : 'albums/absolution.jpg',      // optional, default : nothing\n *   // cover can be a local path (use fullpath 'file:///storage/emulated/...', or only 'my_image.jpg' if my_image.jpg is in the www folder of your app)\n *   //           or a remote url ('http://...', 'https://...', 'ftp://...')\n *   isPlaying   : true,                         // optional, default : true\n *   dismissable : true,                         // optional, default : false\n *\n *   // hide previous/next/close buttons:\n *   hasPrev   : false,      // show previous button, optional, default: true\n *   hasNext   : false,      // show next button, optional, default: true\n *   hasClose  : true,       // show close button, optional, default: false\n *\n * // iOS only, optional\n *   album       : 'Absolution',     // optional, default: ''\n *   duration : 60, // optional, default: 0\n *   elapsed : 10, // optional, default: 0\n *   hasSkipForward : true,  // show skip forward button, optional, default: false\n *   hasSkipBackward : true, // show skip backward button, optional, default: false\n *   skipForwardInterval: 15, // display number for skip forward, optional, default: 0\n *   skipBackwardInterval: 15, // display number for skip backward, optional, default: 0\n *   hasScrubbing: false, // enable scrubbing from control center and lockscreen progress bar, optional\n *\n *   // Android only, optional\n *   // text displayed in the status bar when the notification (and the ticker) are updated, optional\n *   ticker    : 'Now playing \"Time is Running Out\"',\n *   // All icons default to their built-in android equivalents\n *\t // The supplied drawable name, e.g. 'media_play', is the name of a drawable found under android/res/drawable* folders\n *   playIcon: 'media_play',\n *   pauseIcon: 'media_pause',\n *   prevIcon: 'media_prev',\n *   nextIcon: 'media_next',\n *   closeIcon: 'media_close',\n *   notificationIcon: 'notification'\n *  });\n *\n *  this.musicControls.subscribe().subscribe(action => {\n *\n *    function events(action) {\n *      const message = JSON.parse(action).message;\n *      \tswitch(message) {\n *      \t\tcase 'music-controls-next':\n *      \t\t\t// Do something\n *      \t\t\tbreak;\n *      \t\tcase 'music-controls-previous':\n *      \t\t\t// Do something\n *      \t\t\tbreak;\n *      \t\tcase 'music-controls-pause':\n *      \t\t\t// Do something\n *      \t\t\tbreak;\n *      \t\tcase 'music-controls-play':\n *      \t\t\t// Do something\n *      \t\t\tbreak;\n *      \t\tcase 'music-controls-destroy':\n *      \t\t\t// Do something\n *      \t\t\tbreak;\n *\n *          // External controls (iOS only)\n *          case 'music-controls-toggle-play-pause' :\n *      \t\t\t// Do something\n *      \t\t\tbreak;\n *          case 'music-controls-seek-to':\n *            const seekToInSeconds = JSON.parse(action).position;\n *            this.musicControls.updateElapsed({\n *              elapsed: seekToInSeconds,\n *              isPlaying: true\n *            });\n *            // Do something\n *            break;\n *          case 'music-controls-skip-forward':\n *            // Do something\n *            break;\n *          case 'music-controls-skip-backward':\n *            // Do something\n *            break;\n *\n *      \t\t// Headset events (Android only)\n *      \t\t// All media button events are listed below\n *      \t\tcase 'music-controls-media-button' :\n *      \t\t\t// Do something\n *      \t\t\tbreak;\n *      \t\tcase 'music-controls-headset-unplugged':\n *      \t\t\t// Do something\n *      \t\t\tbreak;\n *      \t\tcase 'music-controls-headset-plugged':\n *      \t\t\t// Do something\n *      \t\t\tbreak;\n *      \t\tdefault:\n *      \t\t\tbreak;\n *      \t}\n *      }\n *\n *  this.musicControls.listen(); // activates the observable above\n *\n *  this.musicControls.updateIsPlaying(true);\n *\n *\n * ```\n * @interfaces\n * MusicControlsOptions\n */\n@Plugin({\n  pluginName: 'MusicControls',\n  plugin: 'cordova-plugin-music-controls',\n  pluginRef: 'MusicControls',\n  repo: 'https://github.com/homerours/cordova-music-controls-plugin',\n  platforms: ['Android', 'iOS', 'Windows']\n})\n@Injectable()\nexport class MusicControls extends IonicNativePlugin {\n  /**\n   * Create the media controls\n   * @param options {MusicControlsOptions}\n   * @returns {Promise<any>}\n   */\n  @Cordova()\n  create(options: MusicControlsOptions): Promise<any> {\n    return;\n  }\n\n  /**\n   * Destroy the media controller\n   * @returns {Promise<any>}\n   */\n  @Cordova()\n  destroy(): Promise<any> {\n    return;\n  }\n\n  /**\n   * Subscribe to the events of the media controller\n   * @returns {Observable<any>}\n   */\n  @Cordova({\n    observable: true\n  })\n  subscribe(): Observable<any> {\n    return;\n  }\n\n  /**\n   * Start listening for events, this enables the Observable from the subscribe method\n   */\n  @Cordova({ sync: true })\n  listen(): void {}\n\n  /**\n   * Toggle play/pause:\n   * @param isPlaying {boolean}\n   */\n  @Cordova()\n  updateIsPlaying(isPlaying: boolean): void {}\n\n  /**\n   * Update elapsed time, optionally toggle play/pause:\n   * @param args {Object}\n   */\n  @Cordova({\n    platforms: ['iOS']\n  })\n  updateElapsed(args: { elapsed: string; isPlaying: boolean }): void {}\n\n  /**\n   * Toggle dismissable:\n   * @param dismissable {boolean}\n   */\n  @Cordova()\n  updateDismissable(dismissable: boolean): void {}\n}\n"]}